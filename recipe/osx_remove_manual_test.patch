--- tests/testDailyRollingFileAppender.cpp	2018-04-20 11:23:07.275135148 -0400
+++ tests/testDailyRollingFileAppender.cpp.patched	2018-04-20 11:24:53.307510240 -0400
@@ -40,7 +40,7 @@
 #else 
 #define PATHDELIMITER "\\"
 #endif
-const char* const nesteddirname = "nesteddir"PATHDELIMITER;
+const char* const nesteddirname = "nesteddir" PATHDELIMITER;
 
 
 class DailyRollingTest {
@@ -168,157 +168,6 @@
 	    return 0;
 }
 
-//  Note: this test changes system time. Run it only manually
-namespace OnlyManualTesting {
-
-	const char* absolutePathCategoryName = "absolutePathCategory";
-	const int maxDaysToKeep = 3;
-
-#if defined(WIN32)
-    const char *logFilename = "C:\\Temp\\log4cpp\\dailyrolling_abs_path_file.log";
-    const char *logPathname = "C:\\Temp\\log4cpp";
-#else
-    const char *logFilename = "/var/log/log4cpp/dailyrolling_abs_path_file.log";
-    const char *logPathname = "/var/log/log4cpp";
-#endif
-
-    void setupManualEntryLog() {
-#if defined(WIN32)
-		if (access(logPathname, 0) != 0) {
-			mkdir(logPathname);
-		}
-#else
-		if (access(logPathname, F_OK) != 0) {
-			mkdir(logPathname, 644);
-		}
-#endif
-
-		log4cpp::PatternLayout *ostreamLayout = new log4cpp::PatternLayout();
-		ostreamLayout->setConversionPattern("%d: %p %c %x: %m %n");
-		log4cpp::Appender *ostreamAppender = new log4cpp::OstreamAppender("ostreamAppender", &std::cout);
-		ostreamAppender->setLayout(ostreamLayout);
-
-		log4cpp::PatternLayout *fileLayout = new log4cpp::PatternLayout();
-		fileLayout->setConversionPattern("%d: %p %c %x: %m %n");
-		log4cpp::Appender *fileAppender = new log4cpp::DailyRollingFileAppender("fileAppender", logFilename, maxDaysToKeep);
-		fileAppender->setLayout(fileLayout);
-
-		log4cpp::Category& absolutePathCategory =
-				log4cpp::Category::getInstance(std::string(absolutePathCategoryName));
-		absolutePathCategory.setAdditivity(false);
-
-		absolutePathCategory.addAppender(ostreamAppender);
-		absolutePathCategory.addAppender(fileAppender);
-		absolutePathCategory.setPriority(log4cpp::Priority::DEBUG);
-	}
-
-    int checkThatNoMoreThanNLogFilesPresent(const std::string _fileName, int n);
-
-	int jumpToFuture(int seconds) {
-		
-#if defined(WIN32)
-		SYSTEMTIME now;
-		GetSystemTime(&now);
-		now.wDay += seconds / (24*60*60);
-		now.wSecond += 1;
-		if (SetSystemTime(&now) == 0) {
-			std::cerr << "Can not change system time. Probably not today... Try running as admin? Err: " << GetLastError() << std::endl;
-			return -1;
-		}
-#else
-		time_t  now;
-		if (time(&now) == -1)
-			return -1;
-
-		now += seconds;
-
-		if (stime(&now) == -1) {
-			std::cerr << "Can not set date. Need admin privileges?" << std::endl;
-			return -1;
-		}
-#endif
-		return 0;
-	}
-
-	int makeManualEntryLog()
-	{
-		const int totalLinesCount = 14, linesPerDay=3, jumpPeriod=24*60*60 + 1;
-		int i = 0, future = 0;
-
-		log4cpp::Category& absolutePathCategory =
-				log4cpp::Category::getInstance(std::string(absolutePathCategoryName));
-
-		// 1. update system time (eg: use 'date' command on Linux) manually when test program is running here (at least 4 times)
-        absolutePathCategory.debugStream() << "debug line " << i;
-		while (++i <= totalLinesCount) {
-			if (i % linesPerDay == 0) {
-				if (jumpToFuture(jumpPeriod) == -1)
-					return -1;
-				future += jumpPeriod;
-			}
-            absolutePathCategory.debugStream() << "debug line " << i;
-		}
-
-		if (jumpToFuture(0-future) == -1)
-			return -1;
-
-        // 2. check the number of files in /var/log/log4cpp ( <= maxDaysToKeep) (+1 to allow consequent runs of test)
-        if (checkThatNoMoreThanNLogFilesPresent(std::string(logFilename), maxDaysToKeep + 1) == -1)
-            return -1;
-
-		return 0;
-	}
-
-//  Note: this test changes system time. Run it only manually
-    int checkThatNoMoreThanNLogFilesPresent(const std::string _fileName, int n) {
-        // iterate over files around log file and count files with same prefix
-        const std::string::size_type last_delimiter = _fileName.rfind(PATHDELIMITER);
-        const std::string dirname((last_delimiter == std::string::npos)? "." : _fileName.substr(0, last_delimiter));
-        const std::string filname((last_delimiter == std::string::npos)? _fileName : _fileName.substr(last_delimiter+1, _fileName.size()-last_delimiter-1));
-        int logFilesCount(0);
-#ifndef WIN32    // only available on Win32
-        struct dirent **entries;
-        int nentries = scandir(dirname.c_str(), &entries, 0, alphasort);
-        if (nentries < 0)
-            return -1;
-        for (int i = 0; i < nentries; i++) {
-            if (strstr(entries[i]->d_name, filname.c_str())) {
-                ++logFilesCount;
-            }
-            free(entries[i]);
-        }
-        free(entries);
-#else
-    HANDLE hFind = INVALID_HANDLE_VALUE;
-    WIN32_FIND_DATA ffd;
-	const std::string pattern = _fileName + "*";
-
-    hFind = FindFirstFile(pattern.c_str(), &ffd);
-    if (hFind != INVALID_HANDLE_VALUE) {
-        do {
-            if (!(ffd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)) {
-                ++logFilesCount;
-            }
-        } while (FindNextFile(hFind, &ffd) != 0);
-		FindClose(hFind);
-		hFind = INVALID_HANDLE_VALUE;
-	}
-#endif
-        if (logFilesCount > n) {
-            std::cerr << "Too many log files in the dir " << dirname << ": " << logFilesCount << std::endl;
-        } else {
-            std::cout << "Daily log files in the dir " << dirname << ": " << logFilesCount << std::endl;
-        }
-
-        return (logFilesCount <= n) ? 0 : -1;
-    }
-
-	int testDailyRollingFileAppenderChangeDateManualOnly() {
-		setupManualEntryLog();
-		return makeManualEntryLog();
-	}
-}
-
 int main()
 {
 	int res = testOnlyDailyRollingFileAppender();
